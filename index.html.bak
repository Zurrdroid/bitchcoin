<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Petalfall</title>
		<style>
			body { margin: 0; }
		</style>
	</head>
	<body>
		<script src="js/three.js"></script>
		<script>
		
			// Declaration
			let scene, camera, renderer, container;
		
			let spread = new THREE.Vector3(20, 20, 15);
			let yzSkew = 2;
			let xzSkew = 4;
			let center = [0, 0, 0];
			let fallSpeed = 0.01;
			let turnSpeed = 0.002;
			let petalCount = 200;
			let damp = 0.01;
			let mouseBrushSize = 5;
			let mouseEffectStrength = 0.1;
			
			const petals = [];
			const petalVelocities = [];
			const petalSpins = [];
			
			let windowHalfX = window.innerWidth / 2;
			let windowHalfY = window.innerHeight / 2;
			
			// Cache variables
			let lastScrollY = 0;
			let currentScrollY = 0;
			let mouseX = 0;
			let mouseXLast = 0;
			let mouseY = 0;
			let mouseYLast = 0;
			let mousePointLast = new THREE.Vector3(0,0,0);
			let timeOfLastFrame = 0;
			let windCurrent = new THREE.Vector3(0,0,0);
			
			// Flags
			mouseAlreadyMoved = false;
			
			// Initialize scene and start animation
			init();
			animate(0);
			
			function init() {
				
				// Setting up scene, camera, and renderer
				scene = new THREE.Scene();
				camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 100);
				camera.position.z = 15;
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio(window.devicePixelRatio);
				renderer.setSize(window.innerWidth, window.innerHeight); // Might need to switch this up based on the div size or whatever else is required.
				
				// Adding renderer to DOM
				document.body.appendChild(renderer.domElement);
				
				// Setting up defaults
				lastScrollY = currentScrollY = window.scrollY;
				
				const geometry = new THREE.PlaneGeometry(1, 1);
				geometry.attributes.position.setZ(2, 0.5);
				geometry.computeVertexNormals();
				geometry.attributes.position.needsUpdate = true;
				
				const textureLoader = new THREE.TextureLoader();

				// Load materials for each petal sprite
				let mats = [];
				const codeA = "A".charCodeAt(0);
				for ( let i = 0; i < 15; i++) {
					const sprite = textureLoader.load('img/petal' + String.fromCharCode(codeA + i) + '.png');
					const material = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide, transparent: true, map: sprite });
					mats[i] = ( material );
				}
				
				
				// Generate random petals
				for ( let i = 0; i < petalCount; i ++ ) {

					const material = mats[Math.floor(Math.random() * mats.length)];
					const mesh = new THREE.Mesh(geometry, material);
					const zRand = Math.random();

					mesh.position.z = spread.z * ((zRand*zRand*zRand) - 0.5) + center[2]; // Random^3 so that more petals will spawn further away
					mesh.position.y = spread.y * ((mesh.position.z - camera.position.z)/spread.z) * yzSkew * (Math.random() - 0.5) + center[1];
					mesh.position.x = spread.x * ((mesh.position.z - camera.position.z)/spread.z) * xzSkew * (Math.random() - 0.5) + center[0];

					//mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() + 0.5;
					mesh.rotation.x = Math.random() * Math.PI * 2;
					mesh.rotation.y = Math.random() * Math.PI * 2;
					mesh.rotation.z = Math.random() * Math.PI * 2;

					scene.add(mesh);

					petals.push(mesh);
					petalVelocities.push(new THREE.Vector3(0,0,0));
					petalSpins.push(0);

				}

				scene.fog = new THREE.Fog(0, spread.z/1.2, spread.z*1.5);
				
				// Event Listeners
				document.addEventListener( 'mousemove', onDocumentMouseMove );
				document.addEventListener( 'scroll', onScroll );
			}
			
			function onDocumentMouseMove( event ) {

				mouseX = (event.clientX - windowHalfX)/windowHalfX;
				mouseY = (event.clientY - windowHalfY)/windowHalfY;
				
				if (!mouseAlreadyMoved) {
					// TODO: Do something to record Mouse Delta here...
					mouseXLast = mouseX;
					mouseYLast = mouseY;
					mouseAlreadyMoved = true;
				}

			}
			
			function onScroll(event) {
				currentScrollY = window.scrollY;
			}

			function animate(timeSinceStart) {
				requestAnimationFrame(animate);
				
				let deltaTime = timeSinceStart - timeOfLastFrame;
				timeOfLastFrame = timeSinceStart;
				// TODO: Handle scrolling...
				let scrollMultiplier = 0;
				if (lastScrollY != currentScrollY) {
					scrollMultiplier = -(currentScrollY - lastScrollY)*fallspeed*20;
					lastScrollY = currentScrollY;
				}
				
				// Getting mouse delta...
				let mousePoint = new THREE.Vector3(mouseX, -mouseY, 0);
				let mouseDelta = new THREE.Vector3((mouseX - mouseXLast), (mouseY - mouseYLast), 0);

				windCurrent.x += mouseDelta.x/20;
				windCurrent.x = windCurrent.x/(1 + damp/10);
				windCurrent.y += mouseDelta.y/20;
				windCurrent.y = windCurrent.y/(1 + damp/10);
				
				let windSpeed = windCurrent.lengthSq();
				let mouseSpeed = mouseDelta.lengthSq();
				
				let petalDist = 0;
				let boundTop = spread.y/2;
				let boundBottom = -boundTop;
				let boundRight = spread.x/2;
				let boundLeft = -boundRight;
				var petalDir;
				
				let mouseBrushSquare = mouseBrushSize*mouseBrushSize;
				
				// Project the mouse point into world space
				mousePoint.z = 0.985;
				mousePoint.unproject(camera);
				
				for (let i = 0; i < petals.length; i++) {
					
					petals[i];
				
					petals[i].rotation.x += turnSpeed*(1 + (mouseSpeed + windSpeed)*20);
					petals[i].rotation.y += turnSpeed*(1 + (mouseSpeed + windSpeed)*20);
					petals[i].rotation.z += turnSpeed*(1 + (mouseSpeed + windSpeed)*20);
					
					//petal.position.z = -petal.position.y < -spread/2 ? -spread/2 : -petal.position.z + fallspeed*5;
					
					// Handle vertical petal movement
					// TODO: Scrolling too fast can cause gaps to appear, need to solve this
					boundTop = (spread.y/2) * (-(petals[i].position.z - camera.position.z)/spread.z) * yzSkew;
					boundBottom = -boundTop;
					
					while (petals[i].position.y > boundTop) {
						petals[i].position.y -= boundTop - boundBottom;
					}
					while (petals[i].position.y < boundBottom) {
						petals[i].position.y += boundTop - boundBottom;
					}
					petals[i].position.y -= (fallSpeed + scrollMultiplier);
					
					// TODO: Handle cursor-based petal movement
					boundRight = (spread.x/2) * (-(petals[i].position.z - camera.position.z)/spread.z) * xzSkew;
					boundLeft = -boundRight;
					while (petals[i].position.x > boundRight) {
						petals[i].position.x -= boundRight - boundLeft;
					}
					while (petals[i].position.x < boundLeft) {
						petals[i].position.x += boundRight - boundLeft;
					}
					//petals[i].position.x += (fallSpeed + scrollMultiplier)*windCurrent.x*10;
					//petals[i].position.y -= (fallSpeed + scrollMultiplier)*windCurrent.y*10;
					
					petalDist = petals[i].position.distanceToSquared(mousePoint);
					if (petalDist < mouseBrushSquare) {
						const strength = (1 - petalDist/mouseBrushSquare)*mouseEffectStrength;
						petalVelocities[i] = new THREE.Vector3(petalVelocities[i].x + strength*mouseDelta.x, petalVelocities[i].y - strength*mouseDelta.y, 0);
						petalSpins[i] += mouseSpeed;
					}
					const spin = petalVelocities[i].lengthSq();
					petals[i].position.x += petalVelocities[i].x;
					petals[i].position.y += petalVelocities[i].y;
					petals[i].rotation.x += petalSpins[i];
					
					petalSpins[i] = petalSpins[i]/(1+damp*0.5);
					petalVelocities[i] = new THREE.Vector3(petalVelocities[i].x/(1+damp*0.1),petalVelocities[i].y/(1+damp*0.1),0);
				}
				
				mouseXLast = mouseX; mouseYLast = mouseY; mousePointLast = mousePoint;
				
				renderer.render(scene, camera);
			}
		</script>
	</body>
</html>